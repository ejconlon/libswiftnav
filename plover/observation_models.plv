import prelude;
import qr;
import util;

omega_dot_unit_vector {sats, dim}
  (base_pos :: double[dim])
  (sat_positions :: double[sats, dim])
  (estimate :: double[dim])
  :: double[sats, dim] := (

  vec i in sats -> (
    h := sat_positions[i] - base_pos;
    omega := norm h + norm (h - estimate);
    (2*h - estimate) / omega
  );
);

orthogonal_observation_model_ {sats}
  (pseudoranges :: double[sats])
  (carrier_phases :: double[sats])
  (x :: double[3])
  (base_pos :: double[3])
  (sat_positions :: double[sats, 3])

  (sig_cp :: double)
  (sig_pr :: double)

  (out y :: double[2*(sats-1)])
  (out H :: double[2*(sats-1), 3+(sats-1)])
  (out R :: Scalar double[2*(sats-1), 2*(sats-1)])
  :: () := (

  E :: double[sats, 3];
  E <- (omega_dot_unit_vector base_pos sat_positions x[0:3]) / GPS_L1_LAMBDA;
  u :: double[sats];
  u <- -1.0 / sqrt sats;
  u[0] <- u[0] + 1;

  P_bar :: double[sats-1, sats];
  P_bar <- (scalar 1.0 - 2 * (u * u^T) / (u * u))[1:];
  F :: double[sats-1, sats-1] :=
    scalar 1.0 - (1 / (sats - sqrt sats));
  sig_ratio := sig_cp / (sig_pr / GPS_L1_LAMBDA);

  -- Outputs
  y <- (P_bar * carrier_phases) #
         (sig_ratio * P_bar * pseudoranges / GPS_L1_LAMBDA);
  -- block: [PE, F; sig_ratio*PE, 0]
  PE := P_bar * E;
  H <- ((PE^T # F^T)^T # ((sig_ratio * PE^T) # scalar 0.0)^T);
  R <- 4 * sig_cp * scalar 1.0;
);

direct_observation_model_ {sats}
  (pseudoranges :: double[sats])
  (carrier_phases :: double[sats])
  (x :: double[3])
  (base_pos :: double[3])
  (sat_positions :: double[sats, 3])

  (sig_cp :: double)
  (sig_pr :: double)

  (out y :: double[2*(sats-1)])
  (out H :: double[2*(sats-1), 3+(sats-1)])
  (out R :: double[2*(sats-1), 2*(sats-1)])
  :: () := (

  E :: double[sats, 3];
  E <- (omega_dot_unit_vector base_pos sat_positions x[0:3]) / GPS_L1_LAMBDA;

  D :: double[sats-1, sats];
  D[0:, 1:] <- scalar 1.0;
  D[:,0] <- -1.0; -- reference is first

  sig_ratio := sig_cp / (sig_pr / GPS_L1_LAMBDA);
  -- Outputs
  y <- ((D * carrier_phases) # (sig_ratio * D * pseudoranges / GPS_L1_LAMBDA));

  eye :: double[sats-1, sats-1];
  eye <- scalar 1.0;
  zeros :: double[sats-1, sats-1];
  zeros <- 0.0;
  left := (D * E) # (sig_ratio * D * E);
  right := eye # zeros;
  H <- (left^T # right^T)^T;

  R_single :: double[sats, sats];
  R_single <- 2.0 * scalar 1.0;
  zeros2 :: double[sats-1, sats];
  zeros2 <- 0.0;
  D_block := ((D # zeros2)^T # (zeros2 # D)^T)^T;
  R_block := (((sig_cp * R_single) # scalar 0.0)^T # (scalar 0.0 # (sig_cp * R_single))^T)^T;
  R <- D_block * R_block * D_block^T;
);
